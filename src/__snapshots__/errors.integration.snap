// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`integration:errors > ERR_ENCODING_NOT_SUPPORTED > #toString > should return string representation of error 1`] = `RangeError [ERR_ENCODING_NOT_SUPPORTED]: The "null" encoding is not supported`;

exports[`integration:errors > ERR_IMPORT_ASSERTION_TYPE_FAILED > #toString > should return string representation of error 1`] = `TypeError [ERR_IMPORT_ASSERTION_TYPE_FAILED]: Module '\${process.cwd()}/build.config.ts' is not of type 'json'`;

exports[`integration:errors > ERR_IMPORT_ASSERTION_TYPE_MISSING > #toString > should return string representation of error 1`] = `TypeError [ERR_IMPORT_ASSERTION_TYPE_MISSING]: Module '\${process.cwd()}/package.json' needs an import assertion of type 'json'`;

exports[`integration:errors > ERR_IMPORT_ASSERTION_TYPE_UNSUPPORTED > #toString > should return string representation of error 1`] = `TypeError [ERR_IMPORT_ASSERTION_TYPE_UNSUPPORTED]: Import assertion type 'json5' is unsupported`;

exports[`integration:errors > ERR_INCOMPATIBLE_OPTION_PAIR > #toString > should return string representation of error 1`] = `TypeError [ERR_INCOMPATIBLE_OPTION_PAIR]: Option 'N' cannot be used in combination with option 'cost'`;

exports[`integration:errors > ERR_INVALID_ARG_TYPE > #toString > should return string representation of error 1`] = `TypeError [ERR_INVALID_ARG_TYPE]: The 'ctor' argument must be of type function. Received null`;

exports[`integration:errors > ERR_INVALID_ARG_VALUE > #toString > should return string representation of error 1`] = `TypeError [ERR_INVALID_ARG_VALUE]: The argument 'address' is invalid. Received 1`;

exports[`integration:errors > ERR_INVALID_MODULE_SPECIFIER > #toString > should return string representation of error 1`] = `TypeError [ERR_INVALID_MODULE_SPECIFIER]: Invalid module '@flex-development%2Fpathe' is not a valid package name imported from \${process.cwd()}/scratch.ts`;

exports[`integration:errors > ERR_INVALID_PACKAGE_CONFIG > #toString > should return string representation of error 1`] = `Error [ERR_INVALID_PACKAGE_CONFIG]: Invalid package config \${process.cwd()}/node_modules/@flex-development/pathe/package.json while importing file://\${process.cwd()}/loader.mjs. "exports" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.`;

exports[`integration:errors > ERR_INVALID_PACKAGE_TARGET > #toString > should return string representation of error 1`] = `Error [ERR_INVALID_PACKAGE_TARGET]: Invalid "exports" main target "dist/index.mjs" defined in the package config \${process.cwd()}/node_modules/@flex-development/pathe/package.json imported from \${process.cwd()}/loader.mjs; targets must start with "./"`;

exports[`integration:errors > ERR_INVALID_RETURN_VALUE > #toString > should return string representation of error 1`] = `TypeError [ERR_INVALID_RETURN_VALUE]: Expected null to be returned from the 'body' function but got type number (13).`;

exports[`integration:errors > ERR_INVALID_URL > #toString > should return string representation of error 1`] = `TypeError [ERR_INVALID_URL]: Invalid URL`;

exports[`integration:errors > ERR_METHOD_NOT_IMPLEMENTED > #toString > should return string representation of error 1`] = `Error [ERR_METHOD_NOT_IMPLEMENTED]: The _transform() method is not implemented`;

exports[`integration:errors > ERR_MISSING_OPTION > #toString > should return string representation of error 1`] = `TypeError [ERR_MISSING_OPTION]: init.highWaterMark is required`;

exports[`integration:errors > ERR_MODULE_NOT_FOUND > #toString > should return string representation of error 1`] = `Error [ERR_MODULE_NOT_FOUND]: Cannot find module '\${process.cwd()}/missing-file' imported from \${process.cwd()}/src/__tests__/errors.integration.spec.ts`;

exports[`integration:errors > ERR_NETWORK_IMPORT_DISALLOWED > #toString > should return string representation of error 1`] = `Error [ERR_NETWORK_IMPORT_DISALLOWED]: import of 'https://esm.sh/@flex-development/unist-util-builder' by file://\${process.cwd()}/src/__tests__/errors.integration.spec.ts is not supported: ES modules cannot be loaded by require() from the network`;

exports[`integration:errors > ERR_OPERATION_FAILED > #toString > should return string representation of error 1`] = `Error [ERR_OPERATION_FAILED]: Operation failed: Out of memory`;

exports[`integration:errors > ERR_PACKAGE_IMPORT_NOT_DEFINED > #toString > should return string representation of error 1`] = `TypeError [ERR_PACKAGE_IMPORT_NOT_DEFINED]: Package import specifier '#src' is not defined in package \${process.cwd()}/package.json imported from file://\${process.cwd()}/src/__tests__/errors.integration.spec.ts`;

exports[`integration:errors > ERR_PACKAGE_PATH_NOT_EXPORTED > #toString > should return string representation of error 1`] = `Error [ERR_PACKAGE_PATH_NOT_EXPORTED]: Package subpath './internal' is not defined by 'exports' in \${process.cwd()}/node_modules/@flex-development/errnode/package.json`;

exports[`integration:errors > ERR_UNHANDLED_ERROR > #toString > should return string representation of error 1`] = `Error [ERR_UNHANDLED_ERROR]: Unhandled error. (ECONNREFUSED)`;

exports[`integration:errors > ERR_UNKNOWN_BUILTIN_MODULE > #toString > should return string representation of error 1`] = `Error [ERR_UNKNOWN_BUILTIN_MODULE]: No such built-in module: node:foo`;

exports[`integration:errors > ERR_UNKNOWN_ENCODING > #toString > should return string representation of error 1`] = `TypeError [ERR_UNKNOWN_ENCODING]: Unknown encoding: git`;

exports[`integration:errors > ERR_UNKNOWN_FILE_EXTENSION > #toString > should return string representation of error 1`] = `TypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension ".ts" for file://\${process.cwd()}/src/__tests__/errors.integration.spec.ts`;

exports[`integration:errors > ERR_UNKNOWN_MODULE_FORMAT > #toString > should return string representation of error 1`] = `RangeError [ERR_UNKNOWN_MODULE_FORMAT]: Unknown module format: text/css for URL data:text/css,`;

exports[`integration:errors > ERR_UNSUPPORTED_DIR_IMPORT > #toString > should return string representation of error 1`] = `Error [ERR_UNSUPPORTED_DIR_IMPORT]: Directory import '../errors' is not supported resolving ES modules imported from file://\${process.cwd()}/src/__tests__/errors.integration.spec.ts`;

exports[`integration:errors > ERR_UNSUPPORTED_ESM_URL_SCHEME > #toString > should return string representation of error 1`] = `Error [ERR_UNSUPPORTED_ESM_URL_SCHEME]: Only URLs with a scheme in: data, file, and node are supported by the default ESM loader. Received protocol 'https:'`;

exports[`integration:errors > ERR_UNSUPPORTED_RESOLVE_REQUEST > #toString > should return string representation of error 1`] = `TypeError [ERR_UNSUPPORTED_RESOLVE_REQUEST]: Failed to resolve module specifier "not-found" from "data:text/javascript,export default import.meta.resolve('not-found')": Invalid relative URL or base scheme is not hierarchical.`;
